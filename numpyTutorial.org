#+TITLE: Numpy Tutorial
#+DATE: <2021-07-11 Sun>
#+AUTHOR: Matheus Artur
#+EMAIL: macc@ic.ufal.br
#+LANGUAGE: en
#+CREATOR: Emacs 26.1 (Org mode 9.1.9)
#+DESCRIPTION:
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

#+BEGIN_SRC python
import numpy as np
from numpy import linalg as LA
import pandas as pd
import random
from numpy.polynomial.polynomial import polygrid2d
from numpy.polynomial.polynomial import polygrid3d
from ast import literal_eval
from PIL import Image
import matplotlib.pyplot as plt
#+END_SRC

* NumPy Array
** How to create an empty and a full NumPy array?
#+BEGIN_SRC python
empa = np.empty((3, 4), dtype=int)
print("Empty Array")
print(empa)

flla = np.full([3, 3], 55, dtype=int)
print("\n Full Array")
print(flla)
#+END_SRC
** Create a Numpy array filled with all zeros
#+BEGIN_SRC python
np.zeros((5,), dtype=int)
#+END_SRC
** Create a Numpy array filled with all ones
#+BEGIN_SRC python
b = np.ones([3, 3], dtype = int) 
#+END_SRC
** Check whether a Numpy array contains a specified row
#+BEGIN_SRC python
num = np.arange(20)
arr1 = np.reshape(num, [4, 5])
print("Original array:")
print(arr1)
print([0, 1, 2, 3, 4] in arr1.tolist())
print([0, 1, 2, 3, 5] in arr1.tolist())
print([15, 16, 17, 18, 19] in arr1.tolist())
#+END_SRC
** How to Remove rows in Numpy array that contains non-numeric values?
#+BEGIN_SRC python
n_arr = np.array([[10.5, 22.5, 3.8],
                  [41, np.nan, np.nan]])
  
print("Given array:")
print(n_arr)
  
print("\nRemove all rows containing non-numeric elements")
print(n_arr[~np.isnan(n_arr).any(axis=1)])
#+END_SRC
** Remove single-dimensional entries from the shape of an array
#+BEGIN_SRC python
a = np.array([[[0], [2], [4]]])
np.squeeze(a, axis=0).shape
#+END_SRC
** Find the number of occurrences of a sequence in a NumPy array
#+BEGIN_SRC python
arr = np.array([[2, 8, 9, 4], 
                   [9, 4, 9, 4],
                   [4, 5, 9, 7],
                   [2, 9, 4, 3]])
  
output = repr(arr).count("9, 4")
#+END_SRC
** Find the most frequent value in a NumPy array
#+BEGIN_SRC python
x = np.array([1,2,3,4,5,1,2,1,1,1])
print(np.bincount(x).argmax())
#+END_SRC
** Combining a one and a two-dimensional NumPy Array
#+BEGIN_SRC python
num_1d = np.arange(5)   
num_2d = np.arange(10).reshape(2,5) 
for a, b in np.nditer([num_1d, num_2d]):
    print("%d:%d" % (a, b),)
#+END_SRC
** How to build an array of all combinations of two NumPy arrays?
#+BEGIN_SRC python
np.array(np.meshgrid([1, 2, 3], [4, 5], [6, 7])).T.reshape(-1,3)
#+END_SRC
** How to add a border around a NumPy array?
#+BEGIN_SRC python
array = np.ones((2, 2))
array = np.pad(array, pad_width=1, mode='constant',
               constant_values=0)
#+END_SRC
** How to compare two NumPy arrays?
#+BEGIN_SRC python
np.array_equal([1, 2], [1, 2])
#+END_SRC
** How to check whether specified values are present in NumPy array?
#+BEGIN_SRC python
n_array = np.array([[2, 3, 0],
                    [4, 1, 6]])
#+END_SRC
** How to get all 2D diagonals of a 3D NumPy array?
#+BEGIN_SRC python
np_array = np.arange(3*4*5).reshape(3,4,5)
result = np.diagonal(np_array, axis1=1, axis2=2)
#+END_SRC
** Flatten a Matrix in Python using NumPy
#+BEGIN_SRC python
gfg = np.array([[2, 3], [4, 5]])
flat_gfg = gfg.flatten()
#+END_SRC
** Flatten a 2d numpy array into 1d array
#+BEGIN_SRC python
ini_array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
print("initial array", str(ini_array1))
result = ini_array1.flatten()
#+END_SRC
** Move axes of an array to new positions
#+BEGIN_SRC python
x = np.zeros((2, 3, 4))
print(np.moveaxis(x, 0, -1).shape)
print(np.moveaxis(x, -1, 0).shape)
#+END_SRC
** Interchange two axes of an array
#+BEGIN_SRC python
arr = np.array([[2, 4, 6]])
gfg = np.swapaxes(arr, 0, 1)
print (gfg)
#+END_SRC
** NumPy â€“ Fibonacci Series using Binet Formula
#+BEGIN_SRC python
a = np.arange(1, 11)
lengthA = len(a)
sqrtFive = np.sqrt(5)
alpha = (1 + sqrtFive) / 2
beta = (1 - sqrtFive)#+END_SRC / 2#+END_SRC
Fn = np.rint(((alpha ** a) - (beta ** a)) / (sqrtFive))
print("The first {} numbers of Fibonacci series are {} . ".format(lengthA, Fn))
#+END_SRC
** Counts the number of non-zero values in the array
#+BEGIN_SRC python
arr = [[0, 1, 2, 3, 0], [0, 5, 6, 0, 7]]
gfg = np.count_nonzero(arr)
print (gfg) 
#+END_SRC
** Count the number of elements along a given axis
#+BEGIN_SRC python
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
print(np.size(arr, 0))
print(np.size(arr, 1))
#+END_SRC
** Trim the leading and/or trailing zeros from a 1-D array
#+BEGIN_SRC python
gfg = np.array((0, 0, 0, 0, 1, 5, 7, 0, 6, 2, 9, 0, 10, 0, 0))
res = np.trim_zeros(gfg)
print(res)
#+END_SRC
** Change data type of given numpy array
#+BEGIN_SRC python
array = np.array([1.5, 2.6, 3.7, 4.8, 5.9])
array = array.astype(np.int32)
#+END_SRC
** Reverse a numpy array
#+BEGIN_SRC python
ini_array = np.array([1, 2, 3, 6, 4, 5])

print("initial array", str(ini_array))
print("type of ini_array", type(ini_array))

res = np.flipud(ini_array)

print("final array", str(res))
#+END_SRC
** How to make a NumPy array read-only?
#+BEGIN_SRC python
a = np.zeros(11)
print("Before any change ")
print(a)
  
a[1] = 2
print("Before after first change ")
print(a)
  
a.flags.writeable = False
print("After making array immutable on attempting  second change ")
a[1] = 7


* Questions on NumPy Matrix

#+END_SRC
** Get the maximum value from given matrix
#+BEGIN_SRC python
x = np.matrix(np.arange(12).reshape((3,4)));x
([[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]])
x.max()
#+END_SRC
** Get the minimum value from given matrix
#+BEGIN_SRC python

x = -np.matrix(np.arange(12).reshape((3,4))); x
([[  0,  -1,  -2,  -3],
        [ -4,  -5,  -6,  -7],
        [ -8,  -9, -10, -11]])
x.min()

#+END_SRC
** Find the number of rows and columns of a given matrix using NumPy
#+BEGIN_SRC python
m= np.arange(10,22).reshape((3, 4))
print("Original matrix:")
print(m)
print("Number of rows and columns of the said matrix:")
print(m.shape)
#+END_SRC
** Select the elements from a given matrix
#+BEGIN_SRC python
x = np.arange(10)
condlist = [x<3, x>5]
choicelist = [x, x**2]
np.select(condlist, choicelist)
#+END_SRC
** Find the sum of values in a matrix
#+BEGIN_SRC python
x = np.matrix([[1, 2], [4, 3]])
x.sum()
#+END_SRC
** Calculate the sum of the diagonal elements of a NumPy array
#+BEGIN_SRC python
n_array = np.array([[55, 25, 15],
                    [30, 44, 2],
                    [11, 45, 77]])
print("Numpy Matrix is:")
print(n_array)
trace = np.trace(n_array)
print("\nTrace of given 3X3 matrix:")
print(trace)
#+END_SRC
** Adding and Subtracting Matrices in Python
#+BEGIN_SRC python
A = np.array([[1, 2], [3, 4]])
B = np.array([[4, 5], [6, 7]])
  
print("Printing elements of first matrix")
print(A)
print("Printing elements of second matrix")
print(B)
print("Addition of two matrix")
print(np.add(A, B))
#+END_SRC
** Ways to add row/columns in numpy array
#+BEGIN_SRC python
ini_array = np.array([[1, 2, 3], [45, 4, 7], [9, 6, 10]])
print("initial_array : ", str(ini_array))

column_to_be_added = np.array([1, 2, 3])
result = np.hstack((ini_array, np.atleast_2d(column_to_be_added).T))
 
print ("resultant array", str(result))
#+END_SRC
** Matrix Multiplication in NumPy
#+BEGIN_SRC python
a = [[1, 0], [0, 1]]
b = [[4, 1], [2, 2]]
np.dot(a, b)
#+END_SRC
** Get the eigen values of a matrix
#+BEGIN_SRC python
x = np.random.random()
Q = np.array([[np.cos(x), -np.sin(x)], [np.sin(x), np.cos(x)]])
LA.norm(Q[0, :]), LA.norm(Q[1, :]), np.dot(Q[0, :],Q[1, :])
#+END_SRC
** How to Calculate the determinant of a matrix using NumPy?
#+BEGIN_SRC python
n_array = np.array([[50, 29], [30, 44]])
  
print("Numpy Matrix is:")
print(n_array)
det = np.linalg.det(n_array)
  
print("\nDeterminant of given 2X2 matrix:")
print(int(det))
#+END_SRC
** How to inverse a matrix using NumPy
#+BEGIN_SRC python
A = np.array([[6, 1, 1],
              [4, -2, 5],
              [2, 8, 7]])
  
print(np.linalg.inv(A))
#+END_SRC
** How to count the frequency of unique values in NumPy array?
#+BEGIN_SRC python
a = np.array( [10,10,20,10,20,20,20,30, 30,50,40,40] )
print("Original array:")
print(a)
unique_elements, counts_elements = np.unique(a, return_counts=True)
print("Frequency of unique values of the said array:")
print(np.asarray((unique_elements, counts_elements)))
#+END_SRC
** Multiply matrices of complex numbers using NumPy in Python
#+BEGIN_SRC python
x = np.array([2+3j, 4+5j])
print("Printing First matrix:")
print(x)
  
y = np.array([8+7j, 5+6j])
print("Printing Second matrix:")
print(y)
  
z = np.vdot(x, y)
print("Product of first and second matrices are:")
print(z)
#+END_SRC
** Compute the outer product of two given vectors using NumPy in Python
#+BEGIN_SRC python
array1 = np.array([6,2])
array2 = np.array([2,5])
print("Original 1-D arrays:")
print(array1)
print(array2)
  
print("Outer Product of the two array is:")
result = np.outer(array1, array2)
print(result)
#+END_SRC
** Calculate inner, outer, and cross products of matrices and vectors using NumPy
#+BEGIN_SRC python
a = np.array([2, 6])
b = np.array([3, 10])
print("Vectors :")
print("a = ", a)
print("\nb = ", b)
  
print("\nInner product of vectors a and b =")
print(np.inner(a, b))
  
x = np.array([[2, 3, 4], [3, 2, 9]])
y = np.array([[1, 5, 0], [5, 10, 3]])
print("\nMatrices :")
print("x =", x)
print("\ny =", y)
print("\nInner product of matrices x and y =")
print(np.inner(x, y))
#+END_SRC
** Compute the covariance matrix of two given NumPy arrays
#+BEGIN_SRC python
array1 = np.array([0, 1, 1])
array2 = np.array([2, 2, 1])
  
print("\nCovariance matrix of the said arrays:\n",
      np.cov(array1, array2))
#+END_SRC
** Convert covariance matrix to correlation matrix using Python
#+BEGIN_SRC python
dataset = pd.read_csv("iris.csv")
dataset.head()
#+END_SRC
** Compute the Kronecker product of two mulitdimension NumPy arrays
#+BEGIN_SRC python
array1 = np.array([[1, 2], [3, 4]])  
array2 = np.array([[5, 6], [7, 8]])
  
kroneckerProduct = np.kron(array1, array2)
print(kroneckerProduct)
#+END_SRC
** Convert the matrix into a list
#+BEGIN_SRC python
x = np.matrix(np.arange(12).reshape((3,4))); x
([[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]])
x.tolist()


* Questions on NumPy Indexing

#+END_SRC
** Replace NumPy array elements that doesnâ€™t satisfy the given condition
#+BEGIN_SRC python
n_arr = np.array([75.42436315, 42.48558583, 60.32924763])
print("Given array:")
print(n_arr)
  
print("\nReplace all elements of array which are greater than 50. to 15.50")
n_arr[n_arr > 50.] = 15.50
  
print("New array :\n")
print(n_arr)
#+END_SRC
** Return the indices of elements where the given condition is satisfied
#+BEGIN_SRC python
a = np.array([[1, 2, 3], [4, 5, 6]])
  
print(a)
print ('Indices of elements <4')
  
b = np.where(a<4)
print(b)
  
print("Elements which are <4")
print(a[b])
#+END_SRC
** Replace NaN values with average of columns
#+BEGIN_SRC python
ini_array = np.array([[1.3, 2.5, 3.6, np.nan], 
                      [2.6, 3.3, np.nan, 5.5],
                      [2.1, 3.2, 5.4, 6.5]])
  
print ("initial array", ini_array)
col_mean = np.nanmean(ini_array, axis = 0)
  
print ("columns mean", str(col_mean))
inds = np.where(np.isnan(ini_array))
  
ini_array[inds] = np.take(col_mean, inds[1])
print ("final array", ini_array)
#+END_SRC
** Replace negative value with zero in numpy array
#+BEGIN_SRC python
ini_array1 = np.array([1, 2, -3, 4, -5, -6])
  
result = np.where(ini_array1<0, 0, ini_array1)
print("New resulting array: ", result)
#+END_SRC
** How to get values of an NumPy array at certain index positions?
#+BEGIN_SRC python
a1 = np.array([11, 10, 22, 30, 33])
print("Array 1 :")
print(a1)
  
a2 = np.array([1, 15, 60])
print("Array 2 :")
print(a2)
  
print("\nTake 1 and 15 from Array 2 and put them in\
1st and 5th position of Array 1")
  
a1.put([0, 4], a2)
  
print("Resultant Array :")
print(a1)
#+END_SRC
** Find indices of elements equal to zero in a NumPy array
#+BEGIN_SRC python
nums = np.array([1,0,2,0,3,0,4,5,6,7,8])
print("Original array:")
print(nums)
print("Indices of elements equal to zero of the said array:")
result = np.where(nums == 0)[0]
print(result)
#+END_SRC
** How to Remove columns in Numpy array that contains non-numeric values?
#+BEGIN_SRC python
n_arr = np.array([[10.5, 22.5, np.nan],
                  [41, 52.5, np.nan]])
  
print("Given array:")
print(n_arr)
  
print("\nRemove all columns containing non-numeric elements ")
print(n_arr[:, ~np.isnan(n_arr).any(axis=0)])
#+END_SRC
** How to access different rows of a multidimensional NumPy array?
#+BEGIN_SRC python
arr = np.array([[10, 20, 30], 
                [40, 5, 66], 
                [70, 88, 94]])
  
print("Given Array :")
print(arr)
#+END_SRC  
** Access the First and Last rows of array
#+BEGIN_SRC python
res_arr = arr[[0,2]]
print("\nAccessed Rows :")
print(res_arr)
#+END_SRC
** Get row numbers of NumPy array having element larger than X
#+BEGIN_SRC python
arr = np.array([[1, 2, 3, 4, 5],
                  [10, -3, 30, 4, 5],
                  [3, 2, 5, -4, 5],
                  [9, 7, 3, 6, 5] 
                 ])
X = 6
print("Given Array:\n", arr)
output  = np.where(np.any(arr > X,
                                axis = 1))
print("Result:\n", output)
#+END_SRC
** Get filled the diagonals of NumPy array
#+BEGIN_SRC python
a = np.zeros((3, 3), int)
np.fill_diagonal(a, 5)
#+END_SRC
** Check elements present in the NumPy array
#+BEGIN_SRC python
num = 40
arr = np.array([[1, 30],
                [4, 40]])

if num in arr:
    print(True)
else:
    print(False)
#+END_SRC
** Combined array index by index (not sure about this one :think:)
#+BEGIN_SRC python
a = np.random.rand(10, 20, 30)

idx1 = np.where(a>0.2)
idx2 = np.where(a<0.4)

ridx1 = np.ravel_multi_index(idx1, a.shape)
ridx2 = np.ravel_multi_index(idx2, a.shape)
ridx = np.intersect1d(ridx1, ridx2)
idx = np.unravel_index(ridx, a.shape)

np.allclose(a[idx], a[(a>0.2) & (a<0.4)])


* Questions on NumPy Linear Algebra

#+END_SRC
** Find a matrix or vector norm using NumPy
#+BEGIN_SRC python
vec = np.arange(10)
vec_norm = np.linalg.norm(vec)
 
print("Vector norm:")
print(vec_norm)
#+END_SRC
** Calculate the QR decomposition of a given matrix using NumPy
#+BEGIN_SRC python
matrix1 = np.array([[1, 2, 3], [3, 4, 5]])
q, r = np.linalg.qr(matrix1)
print('\nQ:\n', q)
print('\nR:\n', r)
#+END_SRC
** Compute the condition number of a given matrix using NumPy
#+BEGIN_SRC python
matrix = np.array([[4, 2], [3, 1]])

print("Original matrix:")
print(matrix)
  
result =  np.linalg.cond(matrix)
  
print("Condition number of the matrix:")
print(result)
#+END_SRC
** Compute the eigenvalues and right eigenvectors of a given square array using NumPy?
#+BEGIN_SRC python
m = np.array([[1, 2, 3],
              [2, 3, 4],
              [4, 5, 6]])
  
print("Printing the Original square array:\n",
      m)
  
w, v = np.linalg.eig(m)
  
print("Printing the Eigen values of the given square array:\n",
      w)
  
print("Printing Right eigenvectors of the given square array:\n",
      v)
#+END_SRC
** Calculate the Euclidean distance using NumPy
#+BEGIN_SRC python
point1 = np.array((1, 2, 3))
point2 = np.array((1, 1, 1))
 
dist = np.linalg.norm(point1 - point2)
 
print(dist)


* Questions on NumPy Random

#+END_SRC
** Create a Numpy array with random values
#+BEGIN_SRC python
np.random.rand(3,2)
#+END_SRC
** How to choose elements from the list with different probability using NumPy?
#+BEGIN_SRC python
num_list = [10, 20, 30, 40, 50]
number = np.random.choice(num_list)
print(number)
#+END_SRC
** How to get weighted random choice in Python?
#+BEGIN_SRC python
sampleList = [100, 200, 300, 400, 500]
  
randomList = random.choices(
  sampleList, weights=(10, 20, 30, 40, 50), k=5)
  
print(randomList)
#+END_SRC
** Generate Random Numbers From The Uniform Distribution using NumPy
#+BEGIN_SRC python
r = np.random.uniform(size=4)
print(r)
#+END_SRC
** Get Random Elements form geometric distribution
#+BEGIN_SRC python
z = np.random.geometric(p=0.35, size=10000)
#+END_SRC
** Get Random elements from Laplace distribution
#+BEGIN_SRC python
loc, scale = 0., 1.
s = np.random.laplace(loc, scale, 1000)
#+END_SRC
** Return a Matrix of random values from a uniform distribution
#+BEGIN_SRC python
s = np.random.uniform(-1,0,1000)
#+END_SRC
** Return a Matrix of random values from a Gaussian distribution
#+BEGIN_SRC python
mu, sigma = 0, 0.1
s = np.random.normal(mu, sigma, 1000)
#+END_SRC

* Questions on NumPy Sorting and Searching

#+END_SRC
** How to get the indices of the sorted array using NumPy in Python?
#+BEGIN_SRC python
student_id = np.array([1023, 5202, 6230, 1671, 1682, 5241, 4532])
print("Original array:")
print(student_id)
i = np.argsort(student_id)
print("Indices of the sorted elements of a given array:")
print(i)
#+END_SRC
** Finding the k smallest values of a NumPy array
#+BEGIN_SRC python
arr = np.array([23, 12, 1, 3, 4, 5, 6])
print("The Original Array Content")
print(arr)
  
k = 4
  
arr1 = np.sort(arr)
  
print(k, "smallest elements of the array")
print(arr1[:k])
#+END_SRC
** How to get the n-largest values of an array using NumPy?
#+BEGIN_SRC python
numbers = np.array([1, 3, 2, 4])
n = 2
indices = (-numbers).argsort()[:n]
print(indices)
#+END_SRC
** Sort the values in a matrix
#+BEGIN_SRC python
a = np.array([[1,4], [3,1]])
a.sort(axis=1)
#+END_SRC
** Filter out integers from float numpy array 
#+BEGIN_SRC python
ini_array = np.array([1.0, 1.2, 2.2, 2.0, 3.0, 2.0])
print ("initial array : ", str(ini_array))
result = ini_array[ini_array != ini_array.astype(int)]
print ("final array", result)
#+END_SRC
** Find the indices into a sorted array 
#+BEGIN_SRC python
in_arr = [2, 3, 4, 5, 6]
print ("Input array : ", in_arr)
  
num = 4
print("The number which we want to insert : ", num) 
    
out_ind = np.searchsorted(in_arr, num) 
print ("Output indices to maintain sorted array : ", out_ind)


* Questions on NumPy Mathematics

** How to get element-wise true division of an array using Numpy?
#+BEGIN_SRC python
x = np.arange(5)
  
print("Original array:", 
      x)
rslt = np.true_divide(x, 4)
  
print("After the element-wise division:", 
      rslt)
#+END_SRC
** How to calculate the element-wise absolute value of NumPy array? 
#+BEGIN_SRC python
array = np.array([1, -2, 3])
  
print("Given array:\n", array)
rslt = np.absolute(array)
  
print("Absolute array:\n", rslt)
#+END_SRC
** Compute the negative of the NumPy array 
#+BEGIN_SRC python
in_num = 10
  
print ("Input  number : ", in_num)
    
out_num = np.negative(in_num) 
print ("negative of input number : ", out_num) 
#+END_SRC
** Multiply 2d numpy array corresponding to 1d array 
#+BEGIN_SRC python
ini_array1 = np.array([[1, 2, 3], [2, 4, 5], [1, 2, 3]])
ini_array2 = np.array([0, 2, 3])
  
print("initial array", str(ini_array1))
result = ini_array1 * ini_array2[:, np.newaxis]
#printing result
print("New resulting array: ", result)
#+END_SRC
** Computes the inner product of two arrays 
#+BEGIN_SRC python
np.inner(a, b) = sum(a[:]*b[:])
#+END_SRC
** Compute the nth percentile of the NumPy array 
#+BEGIN_SRC python
arr = [20, 2, 7, 1, 34]
print("arr : ", arr)
print("50th percentile of arr : ",
       np.percentile(arr, 50))
print("25th percentile of arr : ",
       np.percentile(arr, 25))
print("75th percentile of arr : ",
       np.percentile(arr, 75))
#+END_SRC
** Calculate the n-th order discrete difference along the given axis 
#+BEGIN_SRC python
arr = np.array([1, 3, 4, 7, 9])
   
print("Input array  : ", arr)
print("First order difference  : ", np.diff(arr))
print("Second order difference : ", np.diff(arr, n = 2))
print("Third order difference  : ", np.diff(arr, n = 3))
#+END_SRC
** Calculate the sum of all columns in a 2D NumPy array 
#+BEGIN_SRC python
num = np.arange(36)
arr1 = np.reshape(num, [4, 9])
print("Original array:")
print(arr1)
result  = arr1.sum(axis=0)
print("\nSum of all columns:")
print(result)
#+END_SRC
** Calculate average values of two given NumPy arrays 
#+BEGIN_SRC python
arr1 = np.array([3, 4])
arr2 = np.array([1, 0])
avg = (arr1 + arr2) / 2

print("Average of NumPy arrays:\n",
      avg)
#+END_SRC
** How to compute numerical negative value for all elements in a given NumPy array? 
#+BEGIN_SRC python
x = np.array([-1, -2, -3,
              1, 2, 3, 0])

print("Printing the Original array:",
      x)
r1 = np.negative(x)

print("Printing the negative value of the given array:",
      r1)
#+END_SRC
** How to get the floor, ceiling and truncated values of the elements of a numpy array? 
#+BEGIN_SRC python
x = np.array([-1.6, -1.5, -0.3, 0.1, 1.4, 1.8, 2.0])
print("Original array:")
print(x)
print("Floor values of the above array elements:")
print(np.floor(x))
print("Ceil values of the above array elements:")
print(np.ceil(x))
print("Truncated values of the above array elements:")
print(np.trunc(x))
#+END_SRC
** How to round elements of the NumPy array to the nearest integer? 
#+BEGIN_SRC python
a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])
np.rint(a)
gfg = np.matrix('[6.4, 1.3; 12.7, 32.3]')
geeks = gfg.round()     
print(geeks)
#+END_SRC
** Determine the positive square-root of an array 
#+BEGIN_SRC python
arr1 = np.sqrt([1, 4, 9, 16])
arr2 = np.sqrt([6, 10, 18])
  
print("square-root of an array1  : ", arr1)
print("square-root of an array2  : ", arr2)
#+END_SRC
** Evaluate Einsteinâ€™s summation convention of two multidimensional NumPy arrays 
#+BEGIN_SRC python
matrix1 = np.array([[1, 2], [0, 2]])
matrix2 = np.array([[0, 1], [3, 4]])
  
print("Original matrix:")
print(matrix1)
print(matrix2)
  
result = np.einsum("mk,kn", matrix1, matrix2)
  
print("Einsteinâ€™s summation convention of the two matrix:")
print(result)


* Questions on NumPy Statistics

** Compute the median of the flattened NumPy array 
#+BEGIN_SRC python
x_odd = np.array([1, 2, 3, 4, 5, 6, 7])
print("\nPrinting the Original array:")
print(x_odd)
  
med_odd = np.median(x_odd)
print("\nMedian of the array that contains \
odd no of elements:")
print(med_odd)
#+END_SRC
** Find Mean of a List of Numpy Array 
#+BEGIN_SRC python
a = np.array([[1, 2], [3, 4]])
np.mean(a)
#+END_SRC
** Calculate the mean of array ignoring the NaN value 
#+BEGIN_SRC python
arr = np.array([[20, 15, 37], [47, 13, np.nan]])
print("Shape of array is", arr.shape)
print("Mean of array without using nanmean function:",
                                           np.mean(arr))
   
print("Using nanmean function:", np.nanmean(arr))
#+END_SRC
** Get the mean value from given matrix 
#+BEGIN_SRC python
x = np.matrix(np.arange(12).reshape((3, 4)))
x.mean()
#+END_SRC
** Compute the variance of the NumPy array 
#+BEGIN_SRC python
a = np.array([[1, 2], [3, 4]])
np.var(a)
#+END_SRC
** Compute the standard deviation of the NumPy array 
#+BEGIN_SRC python
a = np.array([[1, 2], [3, 4]])
np.std(a)
#+END_SRC
** Compute pearson product-moment correlation coefficients of two given NumPy arrays 
#+BEGIN_SRC python
array1 = np.array([0, 1, 2])
array2 = np.array([3, 4, 5])
rslt = np.corrcoef(array1, array2)
  
print(rslt)
#+END_SRC
** Calculate the mean across dimension in a 2D NumPy array 
#+BEGIN_SRC python
x = np.array([[10, 30], [20, 60]])
print("Original array:")
print(x)
print("Mean of each column:")
print(x.mean(axis=0))
print("Mean of each row:")
print(x.mean(axis=1))
#+END_SRC
** Calculate the average, variance and standard deviation in Python using NumPy 
#+BEGIN_SRC python
list = [2, 4, 4, 4, 5, 5, 7, 9]
print(np.average(list))
#+END_SRC
** Describe a NumPy Array in Python 
#+BEGIN_SRC python
arr = np.array([4, 5, 8, 5, 6, 4,
                9, 2, 4, 3, 6])    
mean = np.mean(arr)
median = np.median(arr)
  
print("Array =", arr)
print("Mean =", mean)
print("Median =", median)


* Questions on Polynomial

#+END_SRC
** Define a polynomial function 
#+BEGIN_SRC python
p = np.poly1d([1, 2, 3])
print(np.poly1d(p))
#+END_SRC
** How to add one polynomial to another using NumPy in Python? 
#+BEGIN_SRC python
px = (5,-2,5)
#q(x) = 2(x**2) + (-5)x +2
qx = (2,-5,2) 
#add the polynomials
rx = np.polynomial.polynomial.polyadd(px,qx)
#print the resultant polynomial
print(rx)
#+END_SRC
** How to subtract one polynomial to another using NumPy in Python? 
#+BEGIN_SRC python
#define the polynomials
#p(x) = 5(x**2) + (-2)x +5
px = (5,-2,5)
#q(x) = 2(x**2) + (-5)x +2
qx = (2,-5,2)
#subtract the polynomials
rx = np.polynomial.polynomial.polysub(px,qx)
#print the resultant polynomial
print(rx)
#+END_SRC
** How to multiply a polynomial to another using NumPy in Python? 
#+BEGIN_SRC python
#define the polynomials
#p(x) = 5(x**2) + (-2)x +5
px = (5, -2, 5)
#q(x) = 2(x**2) + (-5)x +2
qx = (2, -5, 2)
#mul the polynomials
rx = np.polynomial.polynomial.polymul(px, qx)
#print the resultant polynomial
print(rx)
#+END_SRC
** How to divide a polynomial to another using NumPy in Python? 
#+BEGIN_SRC python
#p(x) = 5(x**2) + (-2)x +5
px = (5, -2, 5)
#q(x) = 2(x**2) + (-5)x +2
qx = (2, -5, 2)
#mul the polynomials
rx = np.polynomial.polynomial.polydiv(px, qx)
#print the resultant polynomial
print(rx)
#+END_SRC
** Find the roots of the polynomials using NumPy 
#+BEGIN_SRC python
coeff = [1, 2, 1]
print(np.roots(coeff))
#+END_SRC
** Evaluate a 2-D polynomial series on the Cartesian product 
#+BEGIN_SRC python
c = np.array([[1, 3, 5], [2, 4, 6]]) 
ans = polygrid2d([7, 9], [8, 10], c)
print(ans)
#+END_SRC
** Evaluate a 3-D polynomial series on the Cartesian product
#+BEGIN_SRC python
c = np.array([[1, 3, 5], [2, 4, 6], [10, 11, 12]]) 
ans = polygrid3d([7, 9], [8, 10], [5, 6], c)
print(ans)
#+END_SRC

* Questions on NumPy Strings


** Repeat all the elements of a NumPy array of strings 
#+BEGIN_SRC python
arr = np.array(['Akash', 'Rohit', 'Ayush', 
                'Dhruv', 'Radhika'], dtype = np.str)
print("Original Array :")
print(arr)
new_array = np.char.multiply(arr, 3)
print("\nNew array :")
print(new_array)
#+END_SRC
** How to split the element of a given NumPy array with spaces? 
#+BEGIN_SRC python#+END_SRC
array = np.array(['PHP C** Python C Java C++'], dtype=np.str)
print(array)
sparr = np.char.split(array)
print(sparr)
#+END_SRC
** How to insert a space between characters of all the elements of a given NumPy array? 
#+BEGIN_SRC python
x = np.array(["geeks", "for", "geeks"],
             dtype=np.str)
print("Printing the Original Array:")
print(x)
r = np.char.join(" ", x)
print("Printing the array after inserting space\
between the elements")
print(r)
#+END_SRC
** Find the length of each string element in the Numpy array 
#+BEGIN_SRC python
arr = np.array(['New York', 'Lisbon', 'Beijing', 'Quebec'])
print(arr)
length_checker = np.vectorize(len)
arr_len = length_checker(arr)
print(arr_len)
#+END_SRC
** Swap the case of an array of string 
#+BEGIN_SRC python
in_arr = np.array(['P4Q R', '4q Rp', 'Q Rp4', 'rp4q'])
print ("input array : ", in_arr)
out_arr = np.char.swapcase(in_arr)
print ("output swapcasecased array :", out_arr)
#+END_SRC
** Change the case to uppercase of elements of an array 
#+BEGIN_SRC python
c = np.array(['a1b c', '1bca', 'bca1'])
np.char.upper(c)
#+END_SRC
** Change the case to lowercase of elements of an array 
#+BEGIN_SRC python
c = np.array(['A1B C', '1BCA', 'BCA1']); c
np.char.lower(c)
#+END_SRC
** Join String by a seperator 
#+BEGIN_SRC python
in_arr = np.array(['Python', 'Numpy', 'Pandas'])
print ("Input original array : ", in_arr) 
sep = np.array(['-', '+', '*'])
out_arr = np.core.defchararray.join(sep, in_arr)
print ("Output joined array: ", out_arr)
#+END_SRC
** Check if two same shaped string arrayss one by one 
#+BEGIN_SRC python
in_arr1 = np.array('numpy')
print ("1st Input array : ", in_arr1)
in_arr2 = np.array('numpy')
print ("2nd Input array : ", in_arr2)  
out_arr = np.char.equal(in_arr1, in_arr2)
print ("Output array: ", out_arr)
#+END_SRC
** Count the number of substrings in an array 
#+BEGIN_SRC python
in_arr = np.array(['Sayantan', '  Sayan  ', 'Sayansubhra'])
print ("Input array : ", in_arr)  
out_arr = np.char.count(in_arr, sub ='an')
print ("Output array: ", out_arr) 
#+END_SRC
** Find the lowest index of the substring in an array 
#+BEGIN_SRC python
x1 = np.array(['Python', 'PHP', 'JS', 'EXAMPLES', 'HTML'], dtype=np.str)
print("\nOriginal Array:")
print(x1)
print("count the lowest index of â€˜Pâ€™:")
r = np.char.find(x1, "P")
print(r)
#+END_SRC
** Get the boolean array when values end with a particular character 
#+BEGIN_SRC python
a = np.array(['geeks', 'for', 'geeks'])
gfg = np.char.endswith(a, 'ks')  
print(gfg)

* More Questions on NumPy
#+END_SRC
** Different ways to convert a Python dictionary to a NumPy array 
#+BEGIN_SRC python
name_list = """{
   "column0": {"First_Name": "Akash",
   "Second_Name": "kumar", "Interest": "Coding"},
                  
   "column1": {"First_Name": "Ayush",
   "Second_Name": "Sharma", "Interest": "Cricket"},
     
   "column2": {"First_Name": "Diksha",
   "Second_Name": "Sharma","Interest": "Reading"},
     
   "column3": {"First_Name":" Priyanka",
   "Second_Name": "Kumari", "Interest": "Dancing"}
     
  }"""
print("Type of name_list created:\n",
      type(name_list))
t = literal_eval(name_list)
print("\nPrinting the original Name_list dictionary:\n",
      t)
  
print("Type of original dictionary:\n",
      type(t))
result_nparra = np.array([[v[j] for j in ['First_Name', 'Second_Name',
                                          'Interest']] for k, v in t.items()])
  
print("\nConverted ndarray from the Original dictionary:\n",
      result_nparra)

print("Type:\n", type(result_nparra))
#+END_SRC
** How to convert a list and tuple into NumPy arrays? 
#+BEGIN_SRC python
list1 = [3, 4, 5, 6]
print(type(list1))
print(list1)
array1 = np.asarray(list1)
print(type(array1))
print(array1)
tuple1 = ([8, 4, 6], [1, 2, 3])
print(type(tuple1))
print(tuple1)
array2 = np.asarray(tuple1)
print(type(array2))
print(array2)
#+END_SRC
** Ways to convert array of strings to array of floats 
#+BEGIN_SRC python
stringArray = np.array(["1.000", "1.235", "0.000125", "2", "55", "-12.35", "0", "-0.00025"])
floatArray = stringArray.astype(float)
print(stringArray)
print(floatArray)
#+END_SRC
** Convert a NumPy array into a csv file 
#+BEGIN_SRC python
pd.DataFrame(np_array).to_csv("path/to/file.csv")
#+END_SRC
** How to Convert an image to NumPy array and save it to CSV file using Python? 
#+BEGIN_SRC python
img = Image.open('geeksforgeeks.jpg')
imageToMatrice = gfg.asarray(img)
print(imageToMatrice.shape)
#+END_SRC
** How to save a NumPy array to a text file?
#+BEGIN_SRC python
original_array = np.loadtxt("test.txt").reshape(4, 2)
#+END_SRC
** Load data from a text file 
#+BEGIN_SRC python
File_data = np.loadtxt("example1.txt", dtype=int)
print(File_data)
#+END_SRC
** Plot line graph from NumPy array 
#+BEGIN_SRC python
x = np.arange(1, 11)
y = x * x

plt.title("Line graph")
plt.xlabel("X axis")
plt.ylabel("Y axis")
plt.plot(x, y, color ="red")
plt.show()
#+END_SRC
** Create Histogram using NumPy 
#+BEGIN_SRC python
np.histogram([1, 2, 1], bins=[0, 1, 2, 3])
a = np.arange(5)
hist, bin_edges = np.histogram(a, density=True)
